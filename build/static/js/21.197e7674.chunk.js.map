{"version":3,"sources":["util/Utilities.ts","components/txtinput/TxtInput.tsx","pages/login/Login.tsx","components/InappBrowser.tsx"],"names":["isEmpty","data","trim","isValid","dataType","delimiter","replaceAll","RegExp","REGEX_MAP","test","getPatternValue","pattern","cleaned","finalstr","ctr","i","length","validateEmail","mail","validatePhone","number","validateMobile","addTimeToDateTime","date","timeToAdd","d2","Date","setMinutes","getMinutes","convertToMillSeconds","interval","h","m","timeParts","split","TxtInput","label","name","type","value","onChange","required","errors","datatype","description","placeholder","icon","onBlur","readonly","contactForm","max","useState","validation","setvalidation","className","style","width","padding","spellCheck","autocapitalize","onKeyDown","e","key","preventDefault","onIonChange","validate","val","target","clearInput","autocomplete","onIonBlur","maxlength","iconProps","color","connect","mapDispatchToProps","setIsLoggedIn","setUsername","component","history","setFormSubmitted","error","setError","username","password","submitted","valid","form","setForm","loginClicked","a","errs","endPointHeader","userName","userType","doLogin","EndPoints","response","success","result","dataItems","reduxActions","accessToken","Store","dispatch","user","agentType","addUser","fetchAllDeclaration","userDetails","confirmDetails","push","errorGeneral","message","handleChange","id","src","alt","noValidate","onSubmit","autoComplete","slot","login","class","onClick","url","termsAndConditionUrl","InAppBrowser","create","arrowForwardOutline"],"mappings":"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","file":"static/js/21.197e7674.chunk.js","sourcesContent":["import { REGEX_MAP } from \"./Constants\";\r\nimport moment from \"moment\";\r\nconst milliseconds = (h, m, s) => ((h * 60 * 60 + m * 60 + s) * 1000);\r\n\r\nvar disabledHr;\r\nexport const isEmpty = (data: any) => {\r\n  if(data===null){\r\n  data=\"\"}\r\n  return data.trim() === \"\";\r\n};\r\n\r\nexport const isValid = (dataType: any, data: any, delimiter?: string) => {\r\n  if (delimiter) {\r\n    data = data.replaceAll(delimiter, \"\");\r\n  }\r\n  return new RegExp(REGEX_MAP[dataType]).test(data);\r\n};\r\n\r\nexport const getPatternValue = (data: any, pattern: any, delimiter: any) => {\r\n  if (!data || !pattern || !delimiter) {\r\n    return data;\r\n  }\r\n  var cleaned = data.replaceAll(\" \", \"\").replaceAll(delimiter, \"\");\r\n  let finalstr = \"\";\r\n  let ctr = 0;\r\n\r\n  for (let i = 0; i < pattern.length && ctr < cleaned.length; i++) {\r\n    if (pattern[i] != delimiter) {\r\n      finalstr = finalstr + cleaned[ctr];\r\n      ctr = ctr + 1;\r\n    } else {\r\n      finalstr = finalstr + delimiter;\r\n    }\r\n  }\r\n  return finalstr;\r\n};\r\n\r\nexport const stringToColour = function(str) {\r\n  var hash = 0;\r\n  for (var i = 0; i < str.length; i++) {\r\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n  }\r\n  var colour = '#';\r\n  for (var i = 0; i < 3; i++) {\r\n      var value = (hash >> (i * 8)) & 0xFF;\r\n      colour += ('00' + value.toString(16)).substr(-2);\r\n  }\r\n  return colour;\r\n}\r\n\r\nexport const validateEmail=(mail) =>{\r\n  return new RegExp(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i).test(mail);\r\n}\r\n\r\nexport const validatePhone=(number) =>{\r\n  let regexp =  new RegExp(\"^\\\\d{8}$\");\r\n  var nameTest = regexp.test(number);\r\n  return nameTest;\r\n}\r\n\r\nexport const validateMobile=(number) =>{\r\n  let regexp =  new RegExp(\"^\\\\d{9}$\");\r\n  var nameTest = regexp.test(number);\r\n  return nameTest;\r\n}\r\n\r\nexport function addTimeToDateTime(date: any, timeToAdd: any) {\r\n  var d2 = new Date(date);\r\n  return new Date(d2.setMinutes(date.getMinutes() + timeToAdd));\r\n  //return updatedDate;\r\n}\r\n\r\nexport function setDisabledMinHr(disableHr) {\r\n  //testFun(testContent);\r\n  var disabledTime = addTimeToDateTime(new Date(), 1 * disableHr * 60 || 1);\r\n  disabledHr = disabledTime.toISOString();\r\n  return disabledHr;\r\n}\r\n\r\nexport function getDisabledMinHr() {\r\n  return disabledHr;\r\n}\r\n\r\nexport const convertToMillSeconds = (interval: string) => {\r\n  let timeParts = interval.split(\":\");\r\n  let result = milliseconds(timeParts[0], timeParts[1], 0);\r\n  // days\r\n  return result;\r\n}\r\n","import { IonIcon, IonInput, IonLabel, IonText } from \"@ionic/react\";\r\nimport { personOutline, pulseOutline } from \"ionicons/icons\";\r\nimport { TextInputType } from \"../../util/DataTypes\";\r\nimport React, { useState } from \"react\";\r\nimport \"./TxtInput.scss\";\r\nimport { getPatternValue, isValid, validateEmail } from \"../../util/Utilities\";\r\nimport { connect } from \"../../data/connect\";\r\nimport Icon from \"../Icon\";\r\ninterface TxtInputProps {\r\n  label?: string;\r\n  name: any;\r\n  type: any;\r\n  value?: any;\r\n  onChange?: any;\r\n  required?: any;\r\n  errors?: any;\r\n  pattern?: any;\r\n  datatype?: TextInputType;\r\n  description?: string;\r\n  placeholder: string;\r\n  icon?: any;\r\n  onBlur?: any;\r\n  readonly?: any;\r\n  contactForm?: any;\r\n  max?: number;\r\n}\r\nconst TxtInput: React.FC<TxtInputProps> = ({\r\n  label,\r\n  name,\r\n  type,\r\n  value,\r\n  onChange,\r\n  required,\r\n  errors,\r\n  pattern,\r\n  datatype,\r\n  description,\r\n  placeholder,\r\n  icon,\r\n  onBlur,\r\n  readonly,\r\n  contactForm,\r\n  max,\r\n}) => {\r\n  const [validation, setvalidation] = useState(false);\r\n  const checkKey = (e) => {\r\n    if (e.key.length > 1) return true;\r\n    setvalidation(!isValid(datatype, e.key));\r\n    if (!isValid(datatype, e.key)) {\r\n      e.preventDefault();\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const onInpChange = (e) => {\r\n    let val = e.target.value;\r\n    let validate;\r\n    if (e.target.pattern) {\r\n      val = getPatternValue(val, e.target.pattern, \"-\");\r\n    }\r\n    if (e.target.type === \"email\") {\r\n      validate = validateEmail(val);\r\n      setvalidation(!validate);\r\n    }\r\n    if (!readonly) onChange(e, val, validate);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"form-element-group\"\r\n      style={contactForm ? { width: \"350px\", padding: \"0\" } : {}}\r\n    >\r\n      <fieldset>\r\n        <legend>{label}</legend>\r\n        {type === \"tel\" ? (\r\n          <IonLabel className=\"regularFont-textInput\">971</IonLabel>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <IonInput\r\n          name={name}\r\n          type={type}\r\n          value={value}\r\n          spellCheck={false}\r\n          autocapitalize=\"off\"\r\n          //readonly={readonly}\r\n          onKeyDown={checkKey}\r\n          onIonChange={onInpChange}\r\n          clearInput={true}\r\n          required={required}\r\n          autocomplete=\"off\"\r\n          pattern={pattern}\r\n          placeholder={placeholder}\r\n          className=\"textInput\"\r\n          onIonBlur={(e) => {\r\n            if (onBlur) onBlur(e);\r\n            else {\r\n            }\r\n          }}\r\n          maxlength={max}\r\n          readonly={readonly ? readonly : false}\r\n        >\r\n          {icon && (\r\n            <Icon iconProps={icon} />\r\n            // <IonIcon slot=\"primary\" icon={pulseOutline} />\r\n          )}\r\n        </IonInput>\r\n      </fieldset>\r\n\r\n      <div className=\"\">\r\n        {errors && (\r\n          <IonText color=\"danger\" className=\"validation-message\">\r\n            <IonLabel className=\"ion-padding-start validation-message\">\r\n              {errors}\r\n            </IonLabel>\r\n          </IonText>\r\n        )}\r\n      </div>\r\n      {validation && description && (\r\n        <IonText color=\"danger\" className=\"validation-message\">\r\n          <IonLabel className=\"ion-padding-start validation-message\">\r\n            {description}\r\n          </IonLabel>\r\n        </IonText>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TxtInput;\r\n","import React, { useState, Suspense, lazy } from \"react\";\r\n\r\nimport {\r\n  IonContent,\r\n  IonPage,\r\n  IonList,\r\n  IonLabel,\r\n  IonText,\r\n  IonIcon,\r\n} from \"@ionic/react\";\r\nimport {\r\n  add,\r\n  arrowForwardOutline,\r\n  lockClosedOutline,\r\n  personOutline,\r\n} from \"ionicons/icons\";\r\nimport \"./Login.scss\";\r\nimport { setIsLoggedIn, setUsername } from \"../../data/user/user.actions\";\r\nimport { connect } from \"../../data/connect\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { doLogin, fetchAllDeclaration } from \"../../services/EndPointApi\";\r\nimport * as EndPoints from \"../../util/EndPointURL\";\r\nimport TxtInput from \"../../components/txtinput/TxtInput\";\r\nimport InappBrowser from \"../../components/InappBrowser\";\r\nimport { termsAndConditionUrl } from \"../../util/Constants\";\r\nimport * as reduxActions from \"../../redux/actions/AllActions\";\r\nimport Store from \"../../redux/Store\";\r\n\r\ninterface OwnProps extends RouteComponentProps { }\r\n\r\ninterface DispatchProps {\r\n  setIsLoggedIn: typeof setIsLoggedIn;\r\n  setUsername: typeof setUsername;\r\n}\r\n\r\ninterface LoginProps extends OwnProps, DispatchProps { }\r\n\r\nconst Login: React.FC<LoginProps> = ({\r\n  setIsLoggedIn,\r\n  history,\r\n  //setUsername: setUsernameAction,\r\n}) => {\r\n  const [formSubmitted, setFormSubmitted] = useState(false);\r\n\r\n  const [error, setError] = useState<any>({});\r\n  const [form, setForm] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    submitted: false,\r\n    valid: false,\r\n  });\r\n\r\n  const loginClicked = async (e: React.FormEvent) => {\r\n    let errs: any = {};\r\n    e.preventDefault();\r\n    setFormSubmitted(true);\r\n\r\n    if (!form.username) {\r\n      errs.username = \"Username is required\";\r\n    }\r\n    if (!form.password) {\r\n      errs.password = \"Password is required\";\r\n    }\r\n    if (form.username && form.password) {\r\n      var endPointHeader = {\r\n        userName: form.username,\r\n        password: form.password,\r\n        userType: \"IMPORTER_APP\",\r\n      };\r\n\r\n      var response = await doLogin(EndPoints.loginUrl, endPointHeader);\r\n      if (await response.success) {\r\n        var result = response.data.data.dataItems[0];\r\n        var accessToken = await reduxActions.AddAccessToKen(result.accessToken);\r\n        if (accessToken) Store.dispatch(accessToken);\r\n\r\n        var agentType = await reduxActions.AddAgentType(\r\n          // result.user.activeCompanyCode\r\n          result.user.userType\r\n        );\r\n        if (agentType) Store.dispatch(agentType);\r\n        var addUser = await reduxActions.AddUser(result.user);\r\n        if (addUser) Store.dispatch(addUser);\r\n        // if (result.user.agents && result.user.agents.length > 0) {\r\n        //   history.push(\"/tabs\", result);\r\n        // } else {\r\n        var response = await fetchAllDeclaration(\r\n          EndPoints.fetchConfirmDetails + form.username\r\n        );\r\n        if (response.success) {\r\n          var userDetails = response.data.data.dataItems[0];\r\n\r\n          if (!response.data.data.dataItems[0].confirmDetails) {\r\n            history.push(\"/tabs/\", response);\r\n          } else {\r\n            history.push(\"/confirmDetails\", userDetails);\r\n            //history.push(\"/tabs/\", userDetails);\r\n          }\r\n        } else {\r\n          errs.errorGeneral = response.data.message;\r\n        }\r\n        // }\r\n        await setIsLoggedIn(true);\r\n\r\n        //await setUsernameAction(form.username);\r\n        //history.push(\"/tabs/\", { direction: \"none\" });\r\n      } else {\r\n        errs.errorGeneral = response.data.message || response.data.error;\r\n        setError(errs);\r\n      }\r\n    }\r\n    setError(errs);\r\n  };\r\n  const handleChange = (e: any, value: any) => {\r\n    setForm({\r\n      ...form,\r\n      [e.target.name]: value,\r\n    });\r\n    setError({ ...error, [e.target.name]: \"\" });\r\n  };\r\n  var userNmaeIcon = {\r\n    name: \"username\",\r\n    slot: \"start\",\r\n    login: true,\r\n    class: \"zoom12\",\r\n  };\r\n  var passwordIcon = {\r\n    name: \"password\",\r\n    slot: \"start\",\r\n    login: true,\r\n    class: \"zoom12\",\r\n  };\r\n  return (\r\n    <IonPage id=\"login-page\">\r\n      <IonContent>\r\n        <div className=\"main-container\">\r\n          <div className=\"login-logo\">\r\n            <img src=\"assets/img/dubai_trade_logo.png\" alt=\"Ionic logo\" />\r\n          </div>\r\n          <div className=\"form-content\">\r\n            <div className=\"login-box-header\"></div>\r\n            <form noValidate onSubmit={loginClicked} autoComplete=\"off\">\r\n              <IonList className=\"form-section\">\r\n                <div className=\"login-header\">\r\n                  Login\r\n                  <hr />\r\n                </div>\r\n                <TxtInput\r\n                  name={\"username\"}\r\n                  value={form.username}\r\n                  label=\"Username\"\r\n                  errors={error.username}\r\n                  type=\"text\"\r\n                  required={true}\r\n                  onChange={handleChange}\r\n                  datatype=\"TEXT\"\r\n                  placeholder=\"Username\"\r\n                  icon={userNmaeIcon}\r\n                />\r\n\r\n                <TxtInput\r\n                  name={\"password\"}\r\n                  value={form.password}\r\n                  label=\"Password\"\r\n                  errors={error.password}\r\n                  type=\"password\"\r\n                  required={true}\r\n                  onChange={handleChange}\r\n                  datatype=\"TEXT\"\r\n                  placeholder=\"Password\"\r\n                  icon={passwordIcon}\r\n                />\r\n                <div className=\"\">\r\n                  {error.errorGeneral && (\r\n                    <IonText\r\n                      color=\"danger\"\r\n                      className=\"validation-message genralError\"\r\n                    >\r\n                      <IonLabel className=\"ion-padding-start\">\r\n                        {error.errorGeneral}\r\n                      </IonLabel>\r\n                    </IonText>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"login-tnc\">\r\n                  <div>by clicking \"submit\" you agree to our</div>\r\n                  <div\r\n                    onClick={() => InappBrowser(termsAndConditionUrl)}\r\n                    className=\"tnc\"\r\n                  >\r\n                    terms and conditions\r\n                  </div>\r\n                </div>\r\n              </IonList>\r\n              <div className=\"button-div\">\r\n                <div className=\"button-holder\" onClick={loginClicked}>\r\n                  <IonIcon slot=\"icon-only\" icon={arrowForwardOutline} />\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </IonContent>\r\n    </IonPage>\r\n  );\r\n};\r\n\r\nexport default connect<OwnProps, {}, DispatchProps>({\r\n  mapDispatchToProps: {\r\n    setIsLoggedIn,\r\n    setUsername,\r\n  },\r\n  component: Login,\r\n});\r\n","import React from \"react\";\r\n\r\nimport { InAppBrowser } from \"@ionic-native/in-app-browser\";\r\n\r\nexport default function InappBrowser(url: string) {\r\n  var options = \"zoom=no,footer=no,location=no\";\r\n  return InAppBrowser.create(url, \"_blank\", options);\r\n}\r\n"],"sourceRoot":""}