{"ast":null,"code":"import _toConsumableArray from \"D:\\\\SVN-folder\\\\New-BRANCH-PUSH\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport * as LoginUserTypes from \"../actionTypes/AllActionTypes\";\n\nvar Addresses = function Addresses() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LoginUserTypes.ADD_ADDRESS:\n      if (state.length < 1) {\n        return state = action.payLoad;\n      } else {\n        return [].concat(_toConsumableArray(state), [action.payLoad]);\n      }\n\n    case LoginUserTypes.REMOVE_ADDRESS:\n      //console.log(state.filter((i) => i.code !== action.payLoad));\n      return state.filter(function (i) {\n        return i.code !== action.payLoad;\n      });\n\n    case LoginUserTypes.UPDATE_ADDRESS:\n      //console.log(state.filter((i) => i.code !== action.payLoad));\n      var update = _toConsumableArray(state);\n\n      update.push(action.payLoad);\n      state = action.payLoad;\n      update.pop();\n      return update;\n\n    case LoginUserTypes.CLEAR_ALL_ADDRESS:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nexport default Addresses;","map":{"version":3,"sources":["D:/SVN-folder/New-BRANCH-PUSH/New folder/src/redux/reducers/Addresses.js"],"names":["LoginUserTypes","Addresses","state","action","type","ADD_ADDRESS","length","payLoad","REMOVE_ADDRESS","filter","i","code","UPDATE_ADDRESS","update","push","pop","CLEAR_ALL_ADDRESS"],"mappings":";AAAA,OAAO,KAAKA,cAAZ,MAAgC,+BAAhC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,cAAc,CAACK,WAApB;AACE,UAAIH,KAAK,CAACI,MAAN,GAAe,CAAnB,EAAsB;AACpB,eAAQJ,KAAK,GAAGC,MAAM,CAACI,OAAvB;AACD,OAFD,MAEO;AACL,4CAAWL,KAAX,IAAkBC,MAAM,CAACI,OAAzB;AACD;;AACH,SAAKP,cAAc,CAACQ,cAApB;AACE;AACA,aAAON,KAAK,CAACO,MAAN,CAAa,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACC,IAAF,KAAWR,MAAM,CAACI,OAAzB;AAAA,OAAb,CAAP;;AACF,SAAKP,cAAc,CAACY,cAApB;AACE;AACA,UAAIC,MAAM,sBAAOX,KAAP,CAAV;;AACAW,MAAAA,MAAM,CAACC,IAAP,CAAYX,MAAM,CAACI,OAAnB;AACAL,MAAAA,KAAK,GAAGC,MAAM,CAACI,OAAf;AACAM,MAAAA,MAAM,CAACE,GAAP;AACA,aAAOF,MAAP;;AAEF,SAAKb,cAAc,CAACgB,iBAApB;AACE,aAAO,EAAP;;AACF;AACE,aAAOd,KAAP;AArBJ;AAuBD,CAxBD;;AA0BA,eAAeD,SAAf","sourcesContent":["import * as LoginUserTypes from \"../actionTypes/AllActionTypes\";\n\nconst Addresses = (state = [], action) => {\n  switch (action.type) {\n    case LoginUserTypes.ADD_ADDRESS:\n      if (state.length < 1) {\n        return (state = action.payLoad);\n      } else {\n        return [...state, action.payLoad];\n      }\n    case LoginUserTypes.REMOVE_ADDRESS:\n      //console.log(state.filter((i) => i.code !== action.payLoad));\n      return state.filter((i) => i.code !== action.payLoad);\n    case LoginUserTypes.UPDATE_ADDRESS:\n      //console.log(state.filter((i) => i.code !== action.payLoad));\n      let update = [...state];\n      update.push(action.payLoad);\n      state = action.payLoad;\n      update.pop();\n      return update;\n\n    case LoginUserTypes.CLEAR_ALL_ADDRESS:\n      return [];\n    default:\n      return state;\n  }\n};\n\nexport default Addresses;\n"]},"metadata":{},"sourceType":"module"}