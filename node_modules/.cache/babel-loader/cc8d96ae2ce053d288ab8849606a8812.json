{"ast":null,"code":"import _slicedToArray from \"D:\\\\SVN-folder\\\\New-BRANCH-PUSH\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\SVN-folder\\\\New-BRANCH-PUSH\\\\New folder\\\\src\\\\components\\\\txtinput\\\\TxtInput.tsx\";\n\nimport { IonInput, IonLabel, IonText } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport \"./TxtInput.scss\";\nimport { getPatternValue, isValid, validateEmail } from \"../../util/Utilities\";\nimport Icon from \"../Icon\";\n\nvar TxtInput = function TxtInput(_ref) {\n  var label = _ref.label,\n      name = _ref.name,\n      type = _ref.type,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      required = _ref.required,\n      errors = _ref.errors,\n      pattern = _ref.pattern,\n      datatype = _ref.datatype,\n      description = _ref.description,\n      placeholder = _ref.placeholder,\n      icon = _ref.icon,\n      onBlur = _ref.onBlur,\n      readonly = _ref.readonly,\n      contactForm = _ref.contactForm,\n      max = _ref.max;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      validation = _useState2[0],\n      setvalidation = _useState2[1];\n\n  var checkKey = function checkKey(e) {\n    if (e.key.length > 1) return true;\n    setvalidation(!isValid(datatype, e.key));\n\n    if (!isValid(datatype, e.key)) {\n      e.preventDefault();\n      return false;\n    }\n  };\n\n  var onInpChange = function onInpChange(e) {\n    var val = e.target.value;\n    var validate;\n\n    if (e.target.pattern) {\n      val = getPatternValue(val, e.target.pattern, \"-\");\n    }\n\n    if (e.target.type === \"email\") {\n      validate = validateEmail(val);\n      setvalidation(!validate);\n    }\n\n    if (!readonly) onChange(e, val, validate);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-element-group\",\n    style: contactForm ? {\n      width: \"350px\",\n      padding: \"0\"\n    } : {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, label), type === \"tel\" ? /*#__PURE__*/React.createElement(IonLabel, {\n    className: \"regularFont-textInput\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"971\") : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(IonInput, {\n    name: name,\n    type: type,\n    value: value,\n    spellCheck: false,\n    autocapitalize: \"off\" //readonly={readonly}\n    ,\n    onKeyDown: checkKey,\n    onIonChange: onInpChange,\n    clearInput: true,\n    required: required,\n    autocomplete: \"off\",\n    pattern: pattern,\n    placeholder: placeholder,\n    className: \"textInput\",\n    onIonBlur: function onIonBlur(e) {\n      if (onBlur) onBlur(e);else {}\n    },\n    maxlength: max,\n    readonly: readonly ? readonly : false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, icon && /*#__PURE__*/React.createElement(Icon, {\n    iconProps: icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }) // <IonIcon slot=\"primary\" icon={pulseOutline} />\n  )), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, errors && /*#__PURE__*/React.createElement(IonText, {\n    color: \"danger\",\n    className: \"validation-message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    className: \"ion-padding-start validation-message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, errors))), validation && description && /*#__PURE__*/React.createElement(IonText, {\n    color: \"danger\",\n    className: \"validation-message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    className: \"ion-padding-start validation-message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, description)));\n};\n\nexport default TxtInput;","map":{"version":3,"sources":["D:/SVN-folder/New-BRANCH-PUSH/New folder/src/components/txtinput/TxtInput.tsx"],"names":["IonInput","IonLabel","IonText","React","useState","getPatternValue","isValid","validateEmail","Icon","TxtInput","label","name","type","value","onChange","required","errors","pattern","datatype","description","placeholder","icon","onBlur","readonly","contactForm","max","validation","setvalidation","checkKey","e","key","length","preventDefault","onInpChange","val","target","validate","width","padding"],"mappings":"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","sourcesContent":["import { IonIcon, IonInput, IonLabel, IonText } from \"@ionic/react\";\r\nimport { personOutline, pulseOutline } from \"ionicons/icons\";\r\nimport { TextInputType } from \"../../util/DataTypes\";\r\nimport React, { useState } from \"react\";\r\nimport \"./TxtInput.scss\";\r\nimport { getPatternValue, isValid, validateEmail } from \"../../util/Utilities\";\r\nimport { connect } from \"../../data/connect\";\r\nimport Icon from \"../Icon\";\r\ninterface TxtInputProps {\r\n  label?: string;\r\n  name: any;\r\n  type: any;\r\n  value?: any;\r\n  onChange?: any;\r\n  required?: any;\r\n  errors?: any;\r\n  pattern?: any;\r\n  datatype?: TextInputType;\r\n  description?: string;\r\n  placeholder: string;\r\n  icon?: any;\r\n  onBlur?: any;\r\n  readonly?: any;\r\n  contactForm?: any;\r\n  max?: number;\r\n}\r\nconst TxtInput: React.FC<TxtInputProps> = ({\r\n  label,\r\n  name,\r\n  type,\r\n  value,\r\n  onChange,\r\n  required,\r\n  errors,\r\n  pattern,\r\n  datatype,\r\n  description,\r\n  placeholder,\r\n  icon,\r\n  onBlur,\r\n  readonly,\r\n  contactForm,\r\n  max,\r\n}) => {\r\n  const [validation, setvalidation] = useState(false);\r\n  const checkKey = (e) => {\r\n    if (e.key.length > 1) return true;\r\n    setvalidation(!isValid(datatype, e.key));\r\n    if (!isValid(datatype, e.key)) {\r\n      e.preventDefault();\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const onInpChange = (e) => {\r\n    let val = e.target.value;\r\n    let validate;\r\n    if (e.target.pattern) {\r\n      val = getPatternValue(val, e.target.pattern, \"-\");\r\n    }\r\n    if (e.target.type === \"email\") {\r\n      validate = validateEmail(val);\r\n      setvalidation(!validate);\r\n    }\r\n    if (!readonly) onChange(e, val, validate);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"form-element-group\"\r\n      style={contactForm ? { width: \"350px\", padding: \"0\" } : {}}\r\n    >\r\n      <fieldset>\r\n        <legend>{label}</legend>\r\n        {type === \"tel\" ? (\r\n          <IonLabel className=\"regularFont-textInput\">971</IonLabel>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <IonInput\r\n          name={name}\r\n          type={type}\r\n          value={value}\r\n          spellCheck={false}\r\n          autocapitalize=\"off\"\r\n          //readonly={readonly}\r\n          onKeyDown={checkKey}\r\n          onIonChange={onInpChange}\r\n          clearInput={true}\r\n          required={required}\r\n          autocomplete=\"off\"\r\n          pattern={pattern}\r\n          placeholder={placeholder}\r\n          className=\"textInput\"\r\n          onIonBlur={(e) => {\r\n            if (onBlur) onBlur(e);\r\n            else {\r\n            }\r\n          }}\r\n          maxlength={max}\r\n          readonly={readonly ? readonly : false}\r\n        >\r\n          {icon && (\r\n            <Icon iconProps={icon} />\r\n            // <IonIcon slot=\"primary\" icon={pulseOutline} />\r\n          )}\r\n        </IonInput>\r\n      </fieldset>\r\n\r\n      <div className=\"\">\r\n        {errors && (\r\n          <IonText color=\"danger\" className=\"validation-message\">\r\n            <IonLabel className=\"ion-padding-start validation-message\">\r\n              {errors}\r\n            </IonLabel>\r\n          </IonText>\r\n        )}\r\n      </div>\r\n      {validation && description && (\r\n        <IonText color=\"danger\" className=\"validation-message\">\r\n          <IonLabel className=\"ion-padding-start validation-message\">\r\n            {description}\r\n          </IonLabel>\r\n        </IonText>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TxtInput;\r\n"]},"metadata":{},"sourceType":"module"}