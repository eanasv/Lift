{"ast":null,"code":"import _slicedToArray from \"D:\\\\SVN-folder\\\\New-BRANCH-PUSH\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\SVN-folder\\\\New-BRANCH-PUSH\\\\New folder\\\\src\\\\pages\\\\MapView.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { GoogleMap, useJsApiLoader, useLoadScript, Marker, InfoWindow, Autocomplete, Polygon } from \"@react-google-maps/api\";\nimport { mapConfig } from \"./../util/Config\";\nimport Geocode from \"react-geocode\";\nimport \"./MapView.scss\";\nvar containerStyle = {\n  width: \"100%\",\n  height: \"100%\"\n};\nvar divStyle = {\n  color: \"#434343\",\n  fontFamily: \"Dubai\",\n  fontSize: 14,\n  maxWidth: \"200px\"\n};\n\nfunction MapView(props) {\n  var _useJsApiLoader = useJsApiLoader({\n    id: \"google-map-script\",\n    googleMapsApiKey: mapConfig.apiKey,\n    libraries: mapConfig.libraries\n  }),\n      isLoaded = _useJsApiLoader.isLoaded;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      map = _useState2[0],\n      setMap = _useState2[1];\n\n  var _useState3 = useState(mapConfig.JNCenter),\n      _useState4 = _slicedToArray(_useState3, 2),\n      center = _useState4[0],\n      setCenter = _useState4[1];\n\n  var _useState5 = useState({\n    showingInfoWindow: false\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  var _useState7 = useState(props.address),\n      _useState8 = _slicedToArray(_useState7, 2),\n      address = _useState8[0],\n      setAddress = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      searchBox = _useState10[0],\n      setSearchBox = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      place = _useState12[0],\n      setPlace = _useState12[1];\n\n  var bounds = props.mapViewProps.zone === \"JAFZAN\" ? mapConfig.JAFZA_NORTH_BOUNDS : props.mapViewProps.zone === \"JAFZAS\" ? mapConfig.JAFZA_SOUTH_BOUNDS : mapConfig.DUBAI_LOGISTICS_BOUNDS;\n  var paths = props.mapViewProps.zone === \"JAFZAN\" ? mapConfig.JAFZA_NORTH_POLYGON : props.mapViewProps.zone === \"JAFZAS\" ? mapConfig.JAFZA_SOUTH_POLYGON : mapConfig.DUBAI_LOGISTICS_POLYGON;\n  useEffect(function () {\n    if (props.mapViewProps.latLng) setCenter(props.mapViewProps.latLng);else if (props.mapViewProps.zone == \"JAFZAS\") setCenter(mapConfig.JSCenter);else if (props.mapViewProps.zone == \"JAFZAN\") setCenter(mapConfig.JNCenter);else if (props.mapViewProps.zone == \"DUBAIS\") setCenter(mapConfig.DLCenter);else setCenter(mapConfig.DLCenter);\n    var str = props.mapViewProps.selectedAdd;\n\n    if (str === null || str === void 0 ? void 0 : str.includes(\",\")) {\n      var arr = str === null || str === void 0 ? void 0 : str.split(\",\");\n      var fst = arr === null || arr === void 0 ? void 0 : arr.splice(0, 1).join(\"\");\n      var rest = arr === null || arr === void 0 ? void 0 : arr.join(\",\");\n      setAddress(rest);\n      setPlace(fst);\n    } else {\n      setAddress(str);\n      setPlace(\"\");\n    }\n  }, [props.mapViewProps]);\n\n  var handleMapClick = function handleMapClick() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (centerChanged(args[0].latLng)) {\n      setCenter({\n        lat: args[0].latLng.lat(),\n        lng: args[0].latLng.lng()\n      });\n      console.log(\"onClick args: \", args);\n      setPlace();\n      console.log(\"mapref\", map);\n      Geocode.fromLatLng(args[0].latLng.lat(), args[0].latLng.lng(), mapConfig.apiKey).then(function (response) {\n        console.log(\"map\", response);\n        var address = response.results[0].formatted_address;\n        console.log(\"formatted_address :: \" + address);\n        setAddress(address);\n        props.mapViewProps.getAddressFromMap({\n          add: address,\n          loc: response.results[0].geometry.location\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    }\n  };\n\n  var onMarkerClick = function onMarkerClick(e) {\n    console.log(\"marker\", e);\n    setState({\n      showingInfoWindow: !state.showingInfoWindow\n    });\n  };\n\n  var options = {\n    restriction: {\n      latLngBounds: bounds,\n      strictBounds: false\n    },\n    streetViewControl: mapConfig.streetViewControl,\n    mapTypeControl: mapConfig.mapTypeControl,\n    fullscreenControl: mapConfig.fullscreenControl,\n    clickableIcons: mapConfig.clickableIcons,\n    zoom: mapConfig.zoomLevel\n  };\n\n  var onLoad = function onLoad(autocomplete) {\n    console.log(\"autocomplete: \", autocomplete);\n    setSearchBox(autocomplete);\n  };\n\n  var onPlaceChanged = function onPlaceChanged() {\n    if (searchBox !== null) {\n      console.log(\"autocomplete\", searchBox.getPlace());\n\n      if (centerChanged(searchBox.getPlace().geometry.location)) {\n        setCenter({\n          lat: searchBox.getPlace().geometry.location.lat(),\n          lng: searchBox.getPlace().geometry.location.lng()\n        });\n        var _address = searchBox.getPlace().formatted_address;\n        var _place = searchBox.getPlace().name;\n        setAddress(_address);\n        setPlace(_place);\n        console.log(_place + \", \" + _address);\n        props.mapViewProps.getAddressFromMap({\n          add: _place + \", \" + _address,\n          loc: searchBox.getPlace().geometry.location\n        });\n      }\n    } else {\n      console.log(\"Autocomplete is not loaded yet!\");\n    }\n  };\n\n  var centerChanged = function centerChanged(latLng) {\n    props.mapViewProps.handleError(\"\");\n    var jafza = new window.google.maps.Polygon({\n      paths: paths\n    });\n    if (window.google.maps.geometry.poly.containsLocation(latLng, jafza)) return true;else {\n      setAddress(\"\");\n      setPlace(\"\");\n      props.mapViewProps.getAddressFromMap(\"\");\n      props.mapViewProps.handleError(\"Location is outside of selected zone\");\n    }\n  };\n\n  return isLoaded ? /*#__PURE__*/React.createElement(GoogleMap, {\n    id: \"map-view\",\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 12,\n    onClick: !props.mapViewProps.isContainerEdit ? handleMapClick : {},\n    ref: function ref(_ref) {\n      setMap(_ref);\n    },\n    options: options,\n    onBoundsChanged: function onBoundsChanged(e) {\n      return console.log(\"bounds\", e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: center,\n    onClick: onMarkerClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, state.showingInfoWindow && /*#__PURE__*/React.createElement(InfoWindow, {\n    position: center,\n    onCloseClick: onMarkerClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"u\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  }, place))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  }, address ? address : props.mapViewProps.zone === \"JAFZAN\" ? \"JAFZA North Area\" : props.mapViewProps.zone === \"JAFZAS\" ? \"JAFZA South Area\" : \"Dubai Logistics City\")))), !props.mapViewProps.isContainerEdit && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 47\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    onLoad: onLoad,\n    onPlaceChanged: onPlaceChanged,\n    bounds: bounds,\n    restrictions: {\n      country: \"ae\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"auto-complete-input\",\n    placeholder: \"Search Location Here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Polygon, {\n    paths: paths,\n    options: {\n      fillColor: \"transparent\",\n      strokeColor: \"rgb(5 33 95)\",\n      strokeOpacity: 1,\n      strokeWeight: 1,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      geodesic: false,\n      zIndex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null);\n}\n\nexport default React.memo(MapView);","map":{"version":3,"sources":["D:/SVN-folder/New-BRANCH-PUSH/New folder/src/pages/MapView.js"],"names":["React","useEffect","useState","GoogleMap","useJsApiLoader","useLoadScript","Marker","InfoWindow","Autocomplete","Polygon","mapConfig","Geocode","containerStyle","width","height","divStyle","color","fontFamily","fontSize","maxWidth","MapView","props","id","googleMapsApiKey","apiKey","libraries","isLoaded","map","setMap","JNCenter","center","setCenter","showingInfoWindow","state","setState","address","setAddress","searchBox","setSearchBox","place","setPlace","bounds","mapViewProps","zone","JAFZA_NORTH_BOUNDS","JAFZA_SOUTH_BOUNDS","DUBAI_LOGISTICS_BOUNDS","paths","JAFZA_NORTH_POLYGON","JAFZA_SOUTH_POLYGON","DUBAI_LOGISTICS_POLYGON","latLng","JSCenter","DLCenter","str","selectedAdd","includes","arr","split","fst","splice","join","rest","handleMapClick","args","centerChanged","lat","lng","console","log","fromLatLng","then","response","results","formatted_address","getAddressFromMap","add","loc","geometry","location","error","onMarkerClick","e","options","restriction","latLngBounds","strictBounds","streetViewControl","mapTypeControl","fullscreenControl","clickableIcons","zoom","zoomLevel","onLoad","autocomplete","onPlaceChanged","getPlace","name","handleError","jafza","window","google","maps","poly","containsLocation","isContainerEdit","ref","textAlign","country","fillColor","strokeColor","strokeOpacity","strokeWeight","clickable","draggable","editable","geodesic","zIndex","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  useJsApiLoader,\r\n  useLoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n  Autocomplete,\r\n  Polygon,\r\n} from \"@react-google-maps/api\";\r\nimport { mapConfig } from \"./../util/Config\";\r\nimport Geocode from \"react-geocode\";\r\nimport \"./MapView.scss\";\r\n\r\nconst containerStyle = {\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n};\r\n\r\nconst divStyle = {\r\n  color: \"#434343\",\r\n  fontFamily: \"Dubai\",\r\n  fontSize: 14,\r\n  maxWidth: \"200px\",\r\n};\r\n\r\nfunction MapView(props) {\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: \"google-map-script\",\r\n    googleMapsApiKey: mapConfig.apiKey,\r\n    libraries: mapConfig.libraries,\r\n  });\r\n  const [map, setMap] = useState(null);\r\n  const [center, setCenter] = useState(mapConfig.JNCenter);\r\n  const [state, setState] = useState({ showingInfoWindow: false });\r\n  const [address, setAddress] = useState(props.address);\r\n  const [searchBox, setSearchBox] = useState();\r\n  const [place, setPlace] = useState();\r\n  const bounds =\r\n    props.mapViewProps.zone === \"JAFZAN\"\r\n      ? mapConfig.JAFZA_NORTH_BOUNDS\r\n      : props.mapViewProps.zone === \"JAFZAS\"\r\n      ? mapConfig.JAFZA_SOUTH_BOUNDS\r\n      : mapConfig.DUBAI_LOGISTICS_BOUNDS;\r\n\r\n  const paths =\r\n    props.mapViewProps.zone === \"JAFZAN\"\r\n      ? mapConfig.JAFZA_NORTH_POLYGON\r\n      : props.mapViewProps.zone === \"JAFZAS\"\r\n      ? mapConfig.JAFZA_SOUTH_POLYGON\r\n      : mapConfig.DUBAI_LOGISTICS_POLYGON;\r\n\r\n  useEffect(() => {\r\n    if (props.mapViewProps.latLng) setCenter(props.mapViewProps.latLng);\r\n    else if (props.mapViewProps.zone == \"JAFZAS\") setCenter(mapConfig.JSCenter);\r\n    else if (props.mapViewProps.zone == \"JAFZAN\") setCenter(mapConfig.JNCenter);\r\n    else if (props.mapViewProps.zone == \"DUBAIS\") setCenter(mapConfig.DLCenter);\r\n    else setCenter(mapConfig.DLCenter);\r\n    var str = props.mapViewProps.selectedAdd;\r\n    if(str?.includes(\",\")) {\r\n      var arr = str?.split(\",\");\r\n      var fst = arr?.splice(0,1).join(\"\");\r\n      var rest = arr?.join(\",\");\r\n      setAddress(rest);\r\n      setPlace(fst);\r\n    } else {\r\n      setAddress(str);\r\n      setPlace(\"\");\r\n    }\r\n    \r\n  }, [props.mapViewProps]);\r\n\r\n  const handleMapClick = (...args) => {\r\n    if (centerChanged(args[0].latLng)) {\r\n      setCenter({\r\n        lat: args[0].latLng.lat(),\r\n        lng: args[0].latLng.lng(),\r\n      });\r\n      console.log(\"onClick args: \", args);\r\n      setPlace();\r\n      console.log(\"mapref\", map);\r\n      Geocode.fromLatLng(\r\n        args[0].latLng.lat(),\r\n        args[0].latLng.lng(),\r\n        mapConfig.apiKey\r\n      ).then(\r\n        (response) => {\r\n          console.log(\"map\", response);\r\n          const address = response.results[0].formatted_address;\r\n          console.log(\"formatted_address :: \" + address);\r\n          setAddress(address);\r\n          props.mapViewProps.getAddressFromMap({add: address, loc: response.results[0].geometry.location});\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const onMarkerClick = (e) => {\r\n    console.log(\"marker\", e);\r\n    setState({\r\n      showingInfoWindow: !state.showingInfoWindow,\r\n    });\r\n  };\r\n\r\n  const options = {\r\n    restriction: {\r\n      latLngBounds: bounds,\r\n      strictBounds: false,\r\n    },\r\n    streetViewControl: mapConfig.streetViewControl,\r\n    mapTypeControl: mapConfig.mapTypeControl,\r\n    fullscreenControl: mapConfig.fullscreenControl,\r\n    clickableIcons: mapConfig.clickableIcons,\r\n    zoom: mapConfig.zoomLevel,\r\n  };\r\n\r\n  const onLoad = (autocomplete) => {\r\n    console.log(\"autocomplete: \", autocomplete);\r\n    setSearchBox(autocomplete);\r\n  };\r\n\r\n  const onPlaceChanged = () => {\r\n    if (searchBox !== null) {\r\n      console.log(\"autocomplete\", searchBox.getPlace());\r\n      if (centerChanged(searchBox.getPlace().geometry.location)) {\r\n        setCenter({\r\n          lat: searchBox.getPlace().geometry.location.lat(),\r\n          lng: searchBox.getPlace().geometry.location.lng(),\r\n        });\r\n        const address = searchBox.getPlace().formatted_address;\r\n        const place = searchBox.getPlace().name;\r\n        setAddress(address);\r\n        setPlace(place);\r\n        console.log(place + \", \" + address);\r\n        props.mapViewProps.getAddressFromMap({add: place + \", \" + address, loc: searchBox.getPlace().geometry.location});\r\n      }\r\n    } else {\r\n      console.log(\"Autocomplete is not loaded yet!\");\r\n    }\r\n  };\r\n\r\n  const centerChanged = (latLng) => {\r\n    props.mapViewProps.handleError(\"\");\r\n    const jafza = new window.google.maps.Polygon({\r\n      paths: paths,\r\n    });\r\n    if (window.google.maps.geometry.poly.containsLocation(latLng, jafza))\r\n      return true;\r\n    else {\r\n      setAddress(\"\");\r\n      setPlace(\"\");\r\n      props.mapViewProps.getAddressFromMap(\"\");\r\n      props.mapViewProps.handleError(\"Location is outside of selected zone\");\r\n    }\r\n  };\r\n\r\n  return isLoaded ? (\r\n    <GoogleMap\r\n      id=\"map-view\"\r\n      mapContainerStyle={containerStyle}\r\n      center={center}\r\n      zoom={12}\r\n      onClick={\r\n        !props.mapViewProps.isContainerEdit ? handleMapClick: {}\r\n      }\r\n      ref={(ref) => {\r\n        setMap(ref);\r\n      }}\r\n      options={options}\r\n      onBoundsChanged={(e) => console.log(\"bounds\", e)}\r\n    >\r\n      <Marker position={center} onClick={onMarkerClick}>\r\n        {state.showingInfoWindow && (\r\n          <InfoWindow position={center} onCloseClick={onMarkerClick}>\r\n            <div style={divStyle}>\r\n              <div style={{ textAlign: \"center\" }}>\r\n                <b>\r\n                  <u>{place}</u>\r\n                </b>\r\n              </div>\r\n              <div style={{ textAlign: \"center\" }}>\r\n                {address\r\n                  ? address\r\n                  : props.mapViewProps.zone === \"JAFZAN\"\r\n                  ? \"JAFZA North Area\"\r\n                  : props.mapViewProps.zone === \"JAFZAS\"\r\n                  ? \"JAFZA South Area\"\r\n                  : \"Dubai Logistics City\"}\r\n              </div>\r\n            </div>\r\n          </InfoWindow>\r\n        )}\r\n      </Marker>\r\n      {!props.mapViewProps.isContainerEdit && <div>\r\n        <Autocomplete\r\n          onLoad={onLoad}\r\n          onPlaceChanged={onPlaceChanged}\r\n          bounds={bounds}\r\n          restrictions={{ country: \"ae\" }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            className=\"auto-complete-input\"\r\n            placeholder=\"Search Location Here\"\r\n          />\r\n        </Autocomplete>\r\n      </div> }\r\n      <Polygon\r\n        paths={paths}\r\n        options={{\r\n          fillColor: \"transparent\",\r\n          strokeColor: \"rgb(5 33 95)\",\r\n          strokeOpacity: 1,\r\n          strokeWeight: 1,\r\n          clickable: false,\r\n          draggable: false,\r\n          editable: false,\r\n          geodesic: false,\r\n          zIndex: 1,\r\n        }}\r\n      />\r\n    </GoogleMap>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n\r\nexport default React.memo(MapView);\r\n"]},"metadata":{},"sourceType":"module"}